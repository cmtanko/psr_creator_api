{"version":3,"sources":["../../src/status/dailyReport.controller.js"],"names":["dailyReportController","post","req","res","query","body","user","username","reponame","token","date","isValid","send","getGitRepos","data","onGitReposRetrievedSuccessfully","onGitReposRetrievedFailed","status","commits","get","repoDatas","promises","forEach","c","createdDate","created_at","format","queryDate","repoData","type","commit","toLowerCase","indexOf","commitMessage","message","committedBy","author","email","committedDate","push","payload","pull_request","method","isArray","headers","all","then","result","results","onSuccess","getGitCommitsReport","successFn","reportDatas","reportData","taskId","getCleanSplittedData","taskTitle","taskTimeSpent","getTimeInMins","taskStatus","getProjectStatus","mergedCommitsDetail","i","length","j","isUnique","finalCommitsReport","each","a","undefined","noAutoGeneratedCommitsReport","getUserList","userList","r","includes","userDatas","commitsByUsers","newObject","counter","totalTimeSpent","id","Math","round"],"mappings":"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","file":"dailyReport.controller.js","sourcesContent":["import _ from 'lodash';\nimport axios from 'axios';\nimport moment from 'moment';\nimport dailyReportService from './dailyReport.service';\nimport User from '../models/user.js';\n\nconst dailyReportController = () => {\n\tconst post = (req, res) => {\n\t\tlet query = req.body;\n\t\tlet user = new User({\n\t\t\tusername: query.username,\n\t\t\treponame: query.reponame,\n\t\t\ttoken: query.token,\n\t\t\tdate: query.date\n\t\t});\n\n\t\tif (!user.isValid()) {\n\t\t\tres.send({ 'error': 'Username and Reponame is mendatory!' });\n\t\t\treturn;\n\t\t}\n\n\t\tdailyReportService.getGitRepos(\n\t\t\tuser, (data) => {\n\t\t\t\tonGitReposRetrievedSuccessfully(data, req, res);\n\t\t\t}, (data) => {\n\t\t\t\tonGitReposRetrievedFailed(data, res);\n\t\t\t});\n\t};\n\n\tconst onGitReposRetrievedSuccessfully = (data, req, res) => {\n\t\tlet query = req.body;\n\t\tif (data.status === 200) {\n\t\t\tlet commits = _.get(data, 'data');\n\t\t\tlet repoDatas = [];\n\t\t\tlet promises = [];\n\n\t\t\tcommits.forEach((c) => {\n\t\t\t\tlet createdDate = moment(c.created_at).format('YYYY-MM-DD');\n\t\t\t\tlet queryDate = moment(query.date).format('YYYY-MM-DD');\n\t\t\t\tlet repoData = {};\n\n\t\t\t\t//IF PUSHEVENT TYPE\n\t\t\t\tif (createdDate === queryDate && c.type === 'PushEvent') {\n\t\t\t\t\tlet commit = _.get(c, 'payload.commits[0]') || [];\n\t\t\t\t\tif (_.get(commit, 'message').toLowerCase().indexOf('merge') === -1) {\n\t\t\t\t\t\tlet repoData = {\n\t\t\t\t\t\t\tcommitMessage: commit.message,\n\t\t\t\t\t\t\tcommittedBy: commit.author.email,\n\t\t\t\t\t\t\tcommittedDate: c.created_at\n\t\t\t\t\t\t};\n\t\t\t\t\t\trepoDatas.push(repoData);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//IF PULLREQUESTEVENT TYPE\n\t\t\t\tif (createdDate === queryDate && c.type === 'PullRequestEvent') {\n\t\t\t\t\tpromises.push(axios.get(_.get(c.payload.pull_request, 'commits_url'),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\t\tisArray: true,\n\t\t\t\t\t\t\theaders: { 'Authorization': 'token ' + query.token }\n\t\t\t\t\t\t}\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}, repoDatas);\n\n\t\t\taxios.all(promises)\n\t\t\t\t.then((result) => {\n\t\t\t\t\tresult.forEach((data) => {\n\t\t\t\t\t\tlet results = data.data;\n\t\t\t\t\t\tlet repoData = {\n\t\t\t\t\t\t\tcommitMessage: results[0].commit.message,\n\t\t\t\t\t\t\tcommittedBy: results[0].commit.author.email,\n\t\t\t\t\t\t\tcommittedDate: results[0].commit.author.date\n\t\t\t\t\t\t};\n\t\t\t\t\t\trepoDatas.push(repoData);\n\t\t\t\t\t}, this);\n\t\t\t\t\tonSuccess(repoDatas, res);\n\t\t\t\t});\n\t\t} else {\n\t\t\tres.send({ 'error': 'Unable to fetch data!' + data });\n\t\t}\n\t};\n\n\tconst onGitReposRetrievedFailed = (data, res) => {\n\t\tif (_.get(data, 'response.status') === 401) {\n\t\t\tres.send({ 'error': 'Unauthorized, Please use token generated by git' });\n\t\t} else {\n\t\t\tres.send({ 'error': 'Unable to fetch data!' + data });\n\t\t}\n\t};\n\tconst getGitCommitsReport = (repoDatas, successFn) => {\n\t\tlet reportDatas = [];\n\t\trepoDatas.forEach((c) => {\n\t\t\tlet commitMessage = _.get(c, 'commitMessage') || '';\n\t\t\tlet reportData = {\n\t\t\t\tcommittedBy: c.committedBy || '',\n\t\t\t\tcommittedDate: c.committedDate || '',\n\t\t\t\ttaskId: dailyReportService.getCleanSplittedData(commitMessage, 'space'),\n\t\t\t\ttaskTitle: dailyReportService.getCleanSplittedData(commitMessage, '-m'),\n\t\t\t\ttaskTimeSpent: dailyReportService.getTimeInMins(dailyReportService.getCleanSplittedData(commitMessage, '-t')),\n\t\t\t\ttaskStatus: dailyReportService.getProjectStatus(dailyReportService.getCleanSplittedData(commitMessage, '-s'))\n\t\t\t};\n\t\t\treportDatas.push(reportData);\n\t\t}, reportDatas);\n\n\t\t// LETS MERGE COMMITS FOR SAME TASK, TIME SPENT IS ADDED, COMMIT MESSESS WOULD BE THE FIRST COMMIT\n\t\tlet mergedCommitsDetail = [];\n\t\tfor (let i = 0; i < reportDatas.length; i++) {\n\t\t\tfor (let j = i + 1; j < reportDatas.length; j++) {\n\t\t\t\tif (reportDatas[i].taskId === reportDatas[j].taskId) {\n\t\t\t\t\treportDatas[i].taskTitle = reportDatas[j].taskTitle;\n\t\t\t\t\treportDatas[i].taskTimeSpent = reportDatas[i].taskTimeSpent + reportDatas[j].taskTimeSpent;\n\t\t\t\t\treportDatas[j].isUnique = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmergedCommitsDetail.push(reportDatas[i]);\n\t\t}\n\n\t\t// LETS REMOVE ALL THE NON-UNIQUE TASKS\n\t\tlet finalCommitsReport = [];\n\t\t_.each(mergedCommitsDetail, (a) => {\n\t\t\tif (a.isUnique === undefined) {\n\t\t\t\tfinalCommitsReport.push(a);\n\t\t\t}\n\t\t});\n\n\t\t// REMOVE MERGED COMMITS\n\t\tlet noAutoGeneratedCommitsReport = [];\n\t\t_.each(finalCommitsReport, (a) => {\n\t\t\tif (a.committedBy !== 'GitHub') {\n\t\t\t\tnoAutoGeneratedCommitsReport.push(a);\n\t\t\t}\n\t\t});\n\t\tsuccessFn(noAutoGeneratedCommitsReport);\n\t};\n\n\tconst getUserList = (repoDatas, successFn) => {\n\t\tlet userList = [];\n\t\trepoDatas.forEach((r) => {\n\t\t\tif (_.get(r, 'committedBy')) {\n\t\t\t\tif (!_.includes(userList, r.committedBy) && r.committedBy.toLowerCase() !== 'github') {\n\t\t\t\t\tuserList.push(r.committedBy);\n\t\t\t\t}\n\t\t\t}\n\t\t}, userList);\n\t\tsuccessFn(userList);\n\t};\n\n\tconst onSuccess = (repoDatas, res) => {\n\t\tgetGitCommitsReport(repoDatas,\n\t\t\t(commits) => {\n\t\t\t\tgetUserList(commits, (userDatas) => {\n\t\t\t\t\tlet commitsByUsers = [];\n\t\t\t\t\tuserDatas.forEach((a) => {\n\t\t\t\t\t\tlet newObject = {\n\t\t\t\t\t\t\t'user': a,\n\t\t\t\t\t\t\t'commits': []\n\t\t\t\t\t\t};\n\t\t\t\t\t\tlet counter = 1;\n\t\t\t\t\t\tlet totalTimeSpent = 0;\n\n\t\t\t\t\t\tcommits.forEach((r) => {\n\t\t\t\t\t\t\ttotalTimeSpent += (r.taskTimeSpent / 60);\n\t\t\t\t\t\t\tif (a === r.committedBy) {\n\t\t\t\t\t\t\t\tr.id = counter++;\n\t\t\t\t\t\t\t\tnewObject['commits'].push(r);\n\t\t\t\t\t\t\t\tnewObject['totalTime'] = Math.round(totalTimeSpent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, newObject);\n\t\t\t\t\t\tcommitsByUsers.push(newObject);\n\t\t\t\t\t}, commitsByUsers);\n\n\t\t\t\t\tres.send({ 'commitsByUsers': commitsByUsers, \"repoDatas\": repoDatas });\n\t\t\t\t});\n\t\t\t},\n\t\t\t(data) => {\n\t\t\t\tres.send('Error: ' + data);\n\t\t\t});\n\t};\n\n\treturn {\n\t\tpost: post\n\t};\n};\n\nexport default dailyReportController;\n"]}