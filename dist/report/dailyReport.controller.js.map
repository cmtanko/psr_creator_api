{"version":3,"sources":["../../src/report/dailyReport.controller.js"],"names":["router","post","req","res","query","body","url","username","reponame","get","method","headers","token","then","data","status","commits","repoDatas","promises","forEach","c","createdDate","created_at","format","queryDate","date","repoData","type","commit","toLowerCase","indexOf","commitMessage","message","committedBy","author","email","committedDate","push","payload","pull_request","isArray","all","result","results","onSuccess","send","catch","getCleanSplittedData","splitBy","trim","split","messageDetail","undefined","timeDetail","statusDetail","getTimeInMins","timeSpent","timeInMin","isNumber","parseFloat","hourSplit","minSplit","length","getProjectStatus","getGitCommitsReport","successFn","reportDatas","reportData","taskId","taskTitle","taskTimeSpent","taskStatus","mergedCommitsDetail","i","j","isUnique","finalCommitsReport","each","a","noAutoGeneratedCommitsReport","getUserList","userList","r","includes","userDatas","commitsByUsers","newObject","counter","totalTimeSpent","id","Math","round"],"mappings":"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","file":"dailyReport.controller.js","sourcesContent":["import { Router } from 'express';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nconst router = Router();\n/**\n * @swagger\n * definitions:\n *   Status:\n *     properties:\n *       username:\n *         type: string\n *       reponame:\n *         type: string\n *       token:\n *         type: string\n *       date:\n *         type: string\n */\n\n/**\n * @swagger\n * /api/status:\n *   post:\n *     tags:\n *       - Report Generator\n *     description: Lists Github commits based on given date\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: payload\n *         description: Github commits\n *         in: body\n *         required: true\n *         schema:\n *           $ref: '#/definitions/Status'\n *     responses:\n *       200:\n *         description: Successfully Listed\n */\n\nrouter.post('/', (req, res) => {\n\tlet query = req.body;\n\tlet url = 'https://api.github.com/repos/' + query.username + '/' + query.reponame + '/events?per_page=300';\n\taxios.get(url,\n\t\t{\n\t\t\tmethod: 'GET',\n\t\t\theaders: { 'Authorization': 'token ' + query.token }\n\t\t}\n\t).then((data) => {\n\t\tif (data.status === 200) {\n\t\t\tlet commits = _.get(data, 'data');\n\t\t\tlet repoDatas = [];\n\t\t\tlet promises = [];\n\n\t\t\tcommits.forEach((c) => {\n\t\t\t\tlet createdDate = moment(c.created_at).format('YYYY-MM-DD');\n\t\t\t\tlet queryDate = moment(query.date).format('YYYY-MM-DD');\n\t\t\t\tlet repoData = {};\n\n\t\t\t\t//IF PUSHEVENT TYPE\n\t\t\t\tif (createdDate === queryDate && c.type === 'PushEvent') {\n\t\t\t\t\tlet commit = _.get(c, 'payload.commits[0]') || [];\n\t\t\t\t\tif (_.get(commit, 'message').toLowerCase().indexOf('merge') === -1) {\n\t\t\t\t\t\tlet repoData = {\n\t\t\t\t\t\t\tcommitMessage: commit.message,\n\t\t\t\t\t\t\tcommittedBy: commit.author.email,\n\t\t\t\t\t\t\tcommittedDate: c.created_at\n\t\t\t\t\t\t};\n\t\t\t\t\t\trepoDatas.push(repoData);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//IF PULLREQUESTEVENT TYPE\n\t\t\t\tif (createdDate === queryDate && c.type === 'PullRequestEvent') {\n\t\t\t\t\tpromises.push(axios.get(_.get(c.payload.pull_request, 'commits_url'),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\t\tisArray: true,\n\t\t\t\t\t\t\theaders: { 'Authorization': 'token ' + query.token }\n\t\t\t\t\t\t}\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}, repoDatas);\n\n\t\t\taxios.all(promises)\n\t\t\t\t.then((result) => {\n\t\t\t\t\tresult.forEach((data) => {\n\t\t\t\t\t\tlet results = data.data;\n\t\t\t\t\t\tlet repoData = {\n\t\t\t\t\t\t\tcommitMessage: results[0].commit.message,\n\t\t\t\t\t\t\tcommittedBy: results[0].commit.author.email,\n\t\t\t\t\t\t\tcommittedDate: results[0].commit.author.date\n\t\t\t\t\t\t};\n\t\t\t\t\t\trepoDatas.push(repoData);\n\t\t\t\t\t}, this);\n\t\t\t\t\tonSuccess(repoDatas, res);\n\t\t\t\t});\n\t\t} else {\n\t\t\tres.send({ 'error': 'Unable to fetch data!' + data });\n\t\t}\n\t}).catch((data) => {\n\t\tres.send({ 'error': 'Unable to fetch data!' + data });\n\t});\n});\n\nconst getCleanSplittedData = (data, splitBy) => {\n\tswitch (splitBy) {\n\t\tcase 'space': {\n\t\t\treturn data.trim().split(' ')[0].trim();\n\t\t}\n\t\tcase '-m': {\n\t\t\tlet messageDetail = data.trim().split('-m')[1];\n\n\t\t\treturn messageDetail === undefined ? data.trim() : messageDetail.split('-')[0].trim();\n\t\t}\n\t\tcase '-t': {\n\t\t\tlet timeDetail = data.trim().split('-t')[1];\n\n\t\t\treturn timeDetail === undefined ? '0 mins' : timeDetail.split('-')[0].trim();\n\t\t}\n\t\tcase '-s': {\n\t\t\tlet statusDetail = data.trim().split('-s')[1];\n\n\t\t\treturn statusDetail === undefined ? 'In Progress' : statusDetail.split('-')[0].trim();\n\t\t}\n\t\tdefault:\n\t\t\treturn data;\n\t}\n};\n\nconst getTimeInMins = (timeSpent) => {\n\tlet timeInMin = '';\n\tif (!_.isNumber(parseFloat(timeSpent))) {\n\t\ttimeInMin = '0 mins';\n\t}\n\tif (timeSpent.toLowerCase().indexOf('h') !== -1 && timeSpent.toLowerCase().indexOf('m') !== -1) {\n\t\tlet hourSplit = timeSpent.toLowerCase().split('h')[0].trim();\n\t\tlet minSplit = timeSpent.toLowerCase().split('m')[0].trim().split(' ');\n\t\ttimeInMin = parseFloat(hourSplit) * 60 + parseFloat(minSplit[minSplit.length - 1]);\n\t} else if (timeSpent.toLowerCase().indexOf('h') !== -1) {\n\t\ttimeInMin = parseFloat(timeSpent) * 60;\n\t} else if (timeSpent.toLowerCase().indexOf('m') !== -1) {\n\t\ttimeInMin = parseFloat(timeSpent);\n\t} else if (timeSpent < 8) {\n\t\ttimeInMin = parseFloat(timeSpent) * 60;\n\t} else {\n\t\ttimeInMin = parseFloat(timeSpent);\n\t}\n\n\treturn timeInMin;\n};\n\nconst getProjectStatus = (status) => {\n\tstatus = status.toLowerCase();\n\tif (status === 'wip' || status === 'progress' || status === 'in progress' || status === 'inprogress') {\n\t\treturn 'In Progress';\n\t} else if (status === 'completed' || status === 'complete') {\n\t\treturn 'Completed';\n\t} else {\n\t\treturn 'In Progress';\n\t}\n};\nconst getGitCommitsReport = (repoDatas, successFn) => {\n\tlet reportDatas = [];\n\trepoDatas.forEach((c) => {\n\t\tlet commitMessage = _.get(c, 'commitMessage') || '';\n\t\tlet reportData = {\n\t\t\tcommittedBy: c.committedBy || '',\n\t\t\tcommittedDate: c.committedDate || '',\n\t\t\ttaskId: getCleanSplittedData(commitMessage, 'space'),\n\t\t\ttaskTitle: getCleanSplittedData(commitMessage, '-m'),\n\t\t\ttaskTimeSpent: getTimeInMins(getCleanSplittedData(commitMessage, '-t')),\n\t\t\ttaskStatus: getProjectStatus(getCleanSplittedData(commitMessage, '-s'))\n\t\t};\n\t\treportDatas.push(reportData);\n\t}, reportDatas);\n\n\t// LETS MERGE COMMITS FOR SAME TASK, TIME SPENT IS ADDED, COMMIT MESSESS WOULD BE THE FIRST COMMIT\n\tlet mergedCommitsDetail = [];\n\tfor (let i = 0; i < reportDatas.length; i++) {\n\t\tfor (let j = i + 1; j < reportDatas.length; j++) {\n\t\t\tif (reportDatas[i].taskId === reportDatas[j].taskId) {\n\t\t\t\treportDatas[i].taskTitle = reportDatas[j].taskTitle;\n\t\t\t\treportDatas[i].taskTimeSpent = reportDatas[i].taskTimeSpent + reportDatas[j].taskTimeSpent;\n\t\t\t\treportDatas[j].isUnique = false;\n\t\t\t}\n\t\t}\n\t\tmergedCommitsDetail.push(reportDatas[i]);\n\t}\n\n\t// LETS REMOVE ALL THE NON-UNIQUE TASKS\n\tlet finalCommitsReport = [];\n\t_.each(mergedCommitsDetail, (a) => {\n\t\tif (a.isUnique === undefined) {\n\t\t\tfinalCommitsReport.push(a);\n\t\t}\n\t});\n\n\t// REMOVE MERGED COMMITS\n\tlet noAutoGeneratedCommitsReport = [];\n\t_.each(finalCommitsReport, (a) => {\n\t\tif (a.committedBy !== 'GitHub') {\n\t\t\tnoAutoGeneratedCommitsReport.push(a);\n\t\t}\n\t});\n\tsuccessFn(noAutoGeneratedCommitsReport);\n};\n\nconst getUserList = (repoDatas, successFn) => {\n\tlet userList = [];\n\trepoDatas.forEach((r) => {\n\t\tif (_.get(r, 'committedBy')) {\n\t\t\tif (!_.includes(userList, r.committedBy) && r.committedBy.toLowerCase() !== 'github') {\n\t\t\t\tuserList.push(r.committedBy);\n\t\t\t}\n\t\t}\n\t}, userList);\n\tsuccessFn(userList);\n};\n\nconst onSuccess = (repoDatas, res) => {\n\tgetGitCommitsReport(repoDatas,\n\t\t(commits) => {\n\t\t\tgetUserList(commits, (userDatas) => {\n\t\t\t\tlet commitsByUsers = [];\n\t\t\t\tuserDatas.forEach((a) => {\n\t\t\t\t\tlet newObject = {\n\t\t\t\t\t\t'user': a,\n\t\t\t\t\t\t'commits': []\n\t\t\t\t\t};\n\t\t\t\t\tlet counter = 1;\n\t\t\t\t\tlet totalTimeSpent = 0;\n\n\t\t\t\t\tcommits.forEach((r) => {\n\t\t\t\t\t\ttotalTimeSpent += (r.taskTimeSpent / 60);\n\t\t\t\t\t\tif (a === r.committedBy) {\n\t\t\t\t\t\t\tr.id = counter++;\n\t\t\t\t\t\t\tnewObject['commits'].push(r);\n\t\t\t\t\t\t\tnewObject['totalTime'] = Math.round(totalTimeSpent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, newObject);\n\t\t\t\t\tcommitsByUsers.push(newObject);\n\t\t\t\t}, commitsByUsers);\n\n\t\t\t\tres.send({ 'commitsByUsers': commitsByUsers, \"repoDatas\": repoDatas });\n\t\t\t});\n\t\t},\n\t\t(data) => {\n\t\t\tres.send('Error: ' + data);\n\t\t});\n};\n\n\nexport default router;"]}