{"version":3,"sources":["../../src/report/dailyReport.controller.js"],"names":["router","getCleanSplittedData","data","splitBy","trim","split","messageDetail","undefined","timeDetail","statusDetail","getTimeInMins","timeSpent","timeInMin","isNumber","parseFloat","toLowerCase","indexOf","hourSplit","minSplit","length","getProjectStatus","status","getGitCommitsReport","repoDatas","successFn","failFn","reportDatas","forEach","c","commitMessage","get","reportData","committedBy","committedDate","taskId","taskTitle","taskTimeSpent","taskStatus","push","mergedCommitsDetail","i","j","isUnique","finalCommitsReport","each","a","noAutoGeneratedCommitsReport","getUserList","userList","r","includes","onSuccess","res","commits","userDatas","commitsByUsers","newObject","counter","totalTimeSpent","id","Math","round","send","post","req","next","query","body","username","reponame","method","headers","token","then","self","createdDate","created_at","format","queryDate","date","repoData","type","commit","message","author","email","payload","pull_request","isArray","results","setTimeout","catch"],"mappings":"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","file":"dailyReport.controller.js","sourcesContent":["import { Router } from 'express';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nconst router = Router();\n\nconst getCleanSplittedData = (data, splitBy) => {\n    switch (splitBy) {\n        case 'space': {\n            return data.trim().split(' ')[0].trim();\n        }\n        case '-m': {\n            let messageDetail = data.trim().split('-m')[1];\n\n            return messageDetail === undefined ? data.trim() : messageDetail.split('-')[0].trim();\n        }\n        case '-t': {\n            let timeDetail = data.trim().split('-t')[1];\n\n            return timeDetail === undefined ? '0 mins' : timeDetail.split('-')[0].trim();\n        }\n        case '-s': {\n            let statusDetail = data.trim().split('-s')[1];\n\n            return statusDetail === undefined ? 'In Progress' : statusDetail.split('-')[0].trim();\n        }\n        default:\n            return data;\n    }\n}\n\nconst getTimeInMins = (timeSpent) => {\n    let timeInMin = '';\n    if (!_.isNumber(parseFloat(timeSpent))) {\n        timeInMin = '0 mins';\n    }\n    if (timeSpent.toLowerCase().indexOf('h') !== -1 && timeSpent.toLowerCase().indexOf('m') !== -1) {\n        let hourSplit = timeSpent.toLowerCase().split('h')[0].trim();\n        let minSplit = timeSpent.toLowerCase().split('m')[0].trim().split(' ');\n        timeInMin = parseFloat(hourSplit) * 60 + parseFloat(minSplit[minSplit.length - 1]);\n    } else if (timeSpent.toLowerCase().indexOf('h') !== -1) {\n        timeInMin = parseFloat(timeSpent) * 60;\n    } else if (timeSpent.toLowerCase().indexOf('m') !== -1) {\n        timeInMin = parseFloat(timeSpent);\n    } else if (timeSpent < 8) {\n        timeInMin = parseFloat(timeSpent) * 60;\n    } else {\n        timeInMin = parseFloat(timeSpent);\n    }\n\n    return timeInMin;\n}\n\nconst getProjectStatus = (status) => {\n    status = status.toLowerCase();\n    if (status === 'wip' || status === 'progress' || status === 'in progress' || status === 'inprogress') {\n        return 'In Progress';\n    } else if (status === 'completed' || status === 'complete') {\n        return 'Completed';\n    } else {\n        return 'In Progress';\n    }\n};\nconst getGitCommitsReport = (repoDatas, successFn, failFn) => {\n    let reportDatas = [];\n    repoDatas.forEach(function (c) {\n        let commitMessage = _.get(c, 'commitMessage') || '';\n        let reportData = {\n            committedBy: c.committedBy || '',\n            committedDate: c.committedDate || '',\n            taskId: getCleanSplittedData(commitMessage, 'space'),\n            taskTitle: getCleanSplittedData(commitMessage, '-m'),\n            taskTimeSpent: getTimeInMins(getCleanSplittedData(commitMessage, '-t')),\n            taskStatus: getProjectStatus(getCleanSplittedData(commitMessage, '-s'))\n        };\n        reportDatas.push(reportData);\n    }, reportDatas);\n\n    // LETS MERGE COMMITS FOR SAME TASK, TIME SPENT IS ADDED, COMMIT MESSESS WOULD BE THE FIRST COMMIT\n    let mergedCommitsDetail = [];\n    for (let i = 0; i < reportDatas.length; i++) {\n        for (let j = i + 1; j < reportDatas.length; j++) {\n            if (reportDatas[i].taskId === reportDatas[j].taskId) {\n                reportDatas[i].taskTitle = reportDatas[j].taskTitle;\n                reportDatas[i].taskTimeSpent = reportDatas[i].taskTimeSpent + reportDatas[j].taskTimeSpent;\n                reportDatas[j].isUnique = false;\n            }\n        }\n        mergedCommitsDetail.push(reportDatas[i]);\n    }\n\n    // LETS REMOVE ALL THE NON-UNIQUE TASKS\n    let finalCommitsReport = [];\n    _.each(mergedCommitsDetail, function (a) {\n        if (a.isUnique === undefined) {\n            finalCommitsReport.push(a);\n        }\n    });\n\n    // REMOVE MERGED COMMITS\n    let noAutoGeneratedCommitsReport = [];\n    _.each(finalCommitsReport, function (a) {\n        if (a.committedBy !== 'GitHub') {\n            noAutoGeneratedCommitsReport.push(a);\n        }\n    });\n    successFn(noAutoGeneratedCommitsReport);\n}\n\nconst getUserList = (repoDatas, successFn) => {\n    let userList = [];\n    repoDatas.forEach(function (r) {\n        if (_.get(r, 'committedBy')) {\n            if (!_.includes(userList, r.committedBy) && r.committedBy.toLowerCase() !== 'github') {\n                userList.push(r.committedBy);\n            }\n        }\n    }, userList);\n    successFn(userList);\n}\n\nconst onSuccess = (repoDatas, res) => {\n    getGitCommitsReport(repoDatas,\n        (commits) => {\n            getUserList(commits, (userDatas) => {\n                let commitsByUsers = [];\n                userDatas.forEach(function (a) {\n                    let newObject = {\n                        'user': a,\n                        'commits': []\n                    };\n                    let counter = 1;\n                    let totalTimeSpent = 0;\n\n                    commits.forEach(function (r) {\n                        totalTimeSpent += (r.taskTimeSpent / 60);\n                        if (a === r.committedBy) {\n                            r.id = counter++;\n                            newObject['commits'].push(r);\n                            newObject['totalTime'] = Math.round(totalTimeSpent);\n                        }\n                    }, newObject);\n                    commitsByUsers.push(newObject);\n                }, commitsByUsers);\n\n                res.send({ 'result': commitsByUsers });\n\n            });\n        },\n        (data) => {\n        });\n\n}\n\nrouter.post('/', (req, res, next) => {\n    let query = req.body;\n    axios.get('https://api.github.com/repos/' + query.username + '/' + query.reponame + '/events?',\n        {\n            method: 'GET',\n            headers: { 'Authorization': 'token ' + query.token }\n        }\n    ).then((data) => {\n        if (data.status === 200) {\n            let commits = _.get(data, 'data');\n            let repoDatas = [];\n            commits.forEach(function (c) {\n                let self = repoDatas;\n                let createdDate = moment(c.created_at).format('YYYY-MM-DD');\n                let queryDate = moment(query.date).format('YYYY-MM-DD');\n                let repoData = {};\n                if (createdDate === queryDate && c.type === 'PushEvent') {\n                    let commit = _.get(c, 'payload.commits[0]') || [];\n                    if (_.get(commit, 'message').toLowerCase().indexOf('merge') === -1) {\n                        let repoData = {\n                            commitMessage: commit.message,\n                            committedBy: commit.author.email,\n                            committedDate: c.created_at,\n                        };\n                        repoDatas.push(repoData);\n                    }\n                }\n\n                if (createdDate === queryDate && c.type === 'PullRequestEvent') {\n                    axios.get(_.get(c.payload.pull_request, 'commits_url'),\n                        {\n                            method: 'GET',\n                            isArray: true,\n                            headers: { 'Authorization': 'token ' + query.token }\n                        }\n                    ).then((data) => {\n                        let results = data.data;\n                        let repoData = {\n                            commitMessage: results[0].commit.message,\n                            committedBy: results[0].commit.author.email,\n                            committedDate: results[0].commit.author.date,\n                        };\n                        repoDatas.push(repoData);\n                    });\n                }\n            }, repoDatas);\n\n\n            setTimeout(() => {\n                onSuccess(repoDatas, res);\n            }, 8000);\n\n        } else {\n            //TODO: error handling\n        }\n    }).catch((data) => {\n        res.send({ 'error': 'Unable to fetch data!' + data });\n    });\n});\n\nexport default router;"]}