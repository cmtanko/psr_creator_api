{"version":3,"sources":["../../src/report/dailyReport.controller.js"],"names":["router","post","req","res","next","query","body","url","username","reponame","get","method","headers","token","then","data","status","commits","repoDatas","promises","forEach","c","createdDate","created_at","format","queryDate","date","repoData","type","commit","toLowerCase","indexOf","commitMessage","message","committedBy","author","email","committedDate","push","payload","pull_request","isArray","all","result","results","onSuccess","send","catch","getCleanSplittedData","splitBy","trim","split","messageDetail","undefined","timeDetail","statusDetail","getTimeInMins","timeSpent","timeInMin","isNumber","parseFloat","hourSplit","minSplit","length","getProjectStatus","getGitCommitsReport","successFn","failFn","reportDatas","reportData","taskId","taskTitle","taskTimeSpent","taskStatus","mergedCommitsDetail","i","j","isUnique","finalCommitsReport","each","a","noAutoGeneratedCommitsReport","getUserList","userList","r","includes","userDatas","commitsByUsers","newObject","counter","totalTimeSpent","id","Math","round"],"mappings":"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","file":"dailyReport.controller.js","sourcesContent":["import { Router } from 'express';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nconst router = Router();\n/**\n * @swagger\n * definitions:\n *   Status:\n *     properties:\n *       username:\n *         type: string\n *       reponame:\n *         type: string\n *       token:\n *         type: string\n *       date:\n *         type: string\n */\n\n/**\n * @swagger\n * /api/status:\n *   post:\n *     tags:\n *       - Report Generator\n *     description: Lists Github commits based on given date\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: payload\n *         description: Github commits\n *         in: body\n *         required: true\n *         schema:\n *           $ref: '#/definitions/Status'\n *     responses:\n *       200:\n *         description: Successfully Listed\n */\n\nrouter.post('/', (req, res, next) => {\n    let query = req.body;\n    let url = 'https://api.github.com/repos/' + query.username + '/' + query.reponame + '/events?per_page=300';\n    axios.get(url,\n        {\n            method: 'GET',\n            headers: { 'Authorization': 'token ' + query.token }\n        }\n    ).then((data) => {\n        if (data.status === 200) {\n            let commits = _.get(data, 'data');\n            let repoDatas = [];\n            let promises = [];\n\n            commits.forEach(function (c) {\n                let createdDate = moment(c.created_at).format('YYYY-MM-DD');\n                let queryDate = moment(query.date).format('YYYY-MM-DD');\n                let repoData = {};\n\n                //IF PUSHEVENT TYPE\n                if (createdDate === queryDate && c.type === 'PushEvent') {\n                    let commit = _.get(c, 'payload.commits[0]') || [];\n                    if (_.get(commit, 'message').toLowerCase().indexOf('merge') === -1) {\n                        let repoData = {\n                            commitMessage: commit.message,\n                            committedBy: commit.author.email,\n                            committedDate: c.created_at,\n                        };\n                        repoDatas.push(repoData);\n                    }\n                }\n\n                //IF PULLREQUESTEVENT TYPE\n                if (createdDate === queryDate && c.type === 'PullRequestEvent') {\n                    promises.push(axios.get(_.get(c.payload.pull_request, 'commits_url'),\n                        {\n                            method: 'GET',\n                            isArray: true,\n                            headers: { 'Authorization': 'token ' + query.token }\n                        }\n                    ));\n                }\n            }, repoDatas);\n\n            axios.all(promises)\n                .then((result) => {\n                    result.forEach(function (data) {\n                        let results = data.data;\n                        let repoData = {\n                            commitMessage: results[0].commit.message,\n                            committedBy: results[0].commit.author.email,\n                            committedDate: results[0].commit.author.date,\n                        };\n                        repoDatas.push(repoData);\n                    }, this);\n                    onSuccess(repoDatas, res);\n                });\n        } else {\n            res.send({ 'error': 'Unable to fetch data!' + data });\n        }\n    }).catch((data) => {\n        res.send({ 'error': 'Unable to fetch data!' + data });\n    });\n});\n\nconst getCleanSplittedData = (data, splitBy) => {\n    switch (splitBy) {\n        case 'space': {\n            return data.trim().split(' ')[0].trim();\n        }\n        case '-m': {\n            let messageDetail = data.trim().split('-m')[1];\n\n            return messageDetail === undefined ? data.trim() : messageDetail.split('-')[0].trim();\n        }\n        case '-t': {\n            let timeDetail = data.trim().split('-t')[1];\n\n            return timeDetail === undefined ? '0 mins' : timeDetail.split('-')[0].trim();\n        }\n        case '-s': {\n            let statusDetail = data.trim().split('-s')[1];\n\n            return statusDetail === undefined ? 'In Progress' : statusDetail.split('-')[0].trim();\n        }\n        default:\n            return data;\n    }\n}\n\nconst getTimeInMins = (timeSpent) => {\n    let timeInMin = '';\n    if (!_.isNumber(parseFloat(timeSpent))) {\n        timeInMin = '0 mins';\n    }\n    if (timeSpent.toLowerCase().indexOf('h') !== -1 && timeSpent.toLowerCase().indexOf('m') !== -1) {\n        let hourSplit = timeSpent.toLowerCase().split('h')[0].trim();\n        let minSplit = timeSpent.toLowerCase().split('m')[0].trim().split(' ');\n        timeInMin = parseFloat(hourSplit) * 60 + parseFloat(minSplit[minSplit.length - 1]);\n    } else if (timeSpent.toLowerCase().indexOf('h') !== -1) {\n        timeInMin = parseFloat(timeSpent) * 60;\n    } else if (timeSpent.toLowerCase().indexOf('m') !== -1) {\n        timeInMin = parseFloat(timeSpent);\n    } else if (timeSpent < 8) {\n        timeInMin = parseFloat(timeSpent) * 60;\n    } else {\n        timeInMin = parseFloat(timeSpent);\n    }\n\n    return timeInMin;\n}\n\nconst getProjectStatus = (status) => {\n    status = status.toLowerCase();\n    if (status === 'wip' || status === 'progress' || status === 'in progress' || status === 'inprogress') {\n        return 'In Progress';\n    } else if (status === 'completed' || status === 'complete') {\n        return 'Completed';\n    } else {\n        return 'In Progress';\n    }\n};\nconst getGitCommitsReport = (repoDatas, successFn, failFn) => {\n    let reportDatas = [];\n    repoDatas.forEach(function (c) {\n        let commitMessage = _.get(c, 'commitMessage') || '';\n        let reportData = {\n            committedBy: c.committedBy || '',\n            committedDate: c.committedDate || '',\n            taskId: getCleanSplittedData(commitMessage, 'space'),\n            taskTitle: getCleanSplittedData(commitMessage, '-m'),\n            taskTimeSpent: getTimeInMins(getCleanSplittedData(commitMessage, '-t')),\n            taskStatus: getProjectStatus(getCleanSplittedData(commitMessage, '-s'))\n        };\n        reportDatas.push(reportData);\n    }, reportDatas);\n\n    // LETS MERGE COMMITS FOR SAME TASK, TIME SPENT IS ADDED, COMMIT MESSESS WOULD BE THE FIRST COMMIT\n    let mergedCommitsDetail = [];\n    for (let i = 0; i < reportDatas.length; i++) {\n        for (let j = i + 1; j < reportDatas.length; j++) {\n            if (reportDatas[i].taskId === reportDatas[j].taskId) {\n                reportDatas[i].taskTitle = reportDatas[j].taskTitle;\n                reportDatas[i].taskTimeSpent = reportDatas[i].taskTimeSpent + reportDatas[j].taskTimeSpent;\n                reportDatas[j].isUnique = false;\n            }\n        }\n        mergedCommitsDetail.push(reportDatas[i]);\n    }\n\n    // LETS REMOVE ALL THE NON-UNIQUE TASKS\n    let finalCommitsReport = [];\n    _.each(mergedCommitsDetail, function (a) {\n        if (a.isUnique === undefined) {\n            finalCommitsReport.push(a);\n        }\n    });\n\n    // REMOVE MERGED COMMITS\n    let noAutoGeneratedCommitsReport = [];\n    _.each(finalCommitsReport, function (a) {\n        if (a.committedBy !== 'GitHub') {\n            noAutoGeneratedCommitsReport.push(a);\n        }\n    });\n    successFn(noAutoGeneratedCommitsReport);\n}\n\nconst getUserList = (repoDatas, successFn) => {\n    let userList = [];\n    repoDatas.forEach(function (r) {\n        if (_.get(r, 'committedBy')) {\n            if (!_.includes(userList, r.committedBy) && r.committedBy.toLowerCase() !== 'github') {\n                userList.push(r.committedBy);\n            }\n        }\n    }, userList);\n    successFn(userList);\n}\n\nconst onSuccess = (repoDatas, res) => {\n    getGitCommitsReport(repoDatas,\n        (commits) => {\n            getUserList(commits, (userDatas) => {\n                let commitsByUsers = [];\n                userDatas.forEach(function (a) {\n                    let newObject = {\n                        'user': a,\n                        'commits': []\n                    };\n                    let counter = 1;\n                    let totalTimeSpent = 0;\n\n                    commits.forEach(function (r) {\n                        totalTimeSpent += (r.taskTimeSpent / 60);\n                        if (a === r.committedBy) {\n                            r.id = counter++;\n                            newObject['commits'].push(r);\n                            newObject['totalTime'] = Math.round(totalTimeSpent);\n                        }\n                    }, newObject);\n                    commitsByUsers.push(newObject);\n                }, commitsByUsers);\n\n                res.send({ 'commitsByUsers': commitsByUsers, \"repoDatas\": repoDatas });\n\n            });\n        },\n        (data) => {\n            res.send('Error: ' + data);\n        });\n\n}\n\n\nexport default router;"]}