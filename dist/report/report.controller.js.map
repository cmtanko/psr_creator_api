{"version":3,"sources":["../../src/report/report.controller.js"],"names":["router","getStatus","statusCode","query","inprogress","complete","todo","post","req","res","next","body","assigneeString","assigneeArray","assignee","split","forEach","a","i","array","length","console","log","get","url","method","headers","token","then","data","results","issues","each","result","push","task_id","key","task_type","task_description","task_creation_date","task_updated_date","task_assignee","task_status","sortBy","send","catch"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,sBAAf;AACA,IAAMC,YAAY,SAAZA,SAAY,CAACC,UAAD,EAAYC,KAAZ,EAAsB;AACtC,MAAID,eAAeC,MAAMC,UAAzB,EAAqC;AAAE,WAAO,aAAP;AAAuB,GAA9D,MACK,IAAIF,eAAeC,MAAME,QAAzB,EAAmC;AAAE,WAAO,WAAP;AAAqB,GAA1D,MACA,IAAIH,eAAeC,MAAMG,IAAzB,EAA+B;AAAE,WAAO,OAAP;AAAiB;AACvD,SAAOJ,UAAP;AACD,CALD;;AAOAF,OAAOO,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnC,MAAIP,QAAQK,IAAIG,IAAhB;AACA,MAAIC,iBAAiB,EAArB;AACA,MAAIC,gBAAgBV,MAAMW,QAAN,CAAeC,KAAf,CAAqB,GAArB,CAApB;AACAF,gBAAcG,OAAd,CAAsB,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,KAAhB,EAAuB;AAC3C,QAAID,MAAMC,MAAMC,MAAN,GAAe,CAAzB,EAA4B;AAC1BR,wBAAkB,cAAcK,CAAhC;AACD,KAFD,MAEO;AACLL,wBAAkB,cAAcK,CAAd,GAAkB,IAApC;AACD;AACF,GAND,EAMGL,cANH;AAOAS,UAAQC,GAAR,CAAYV,cAAZ;AACA,kBAAMW,GAAN,CAAUpB,MAAMqB,GAAN,GAAY,8BAAZ,GAA6CZ,cAA7C,GAA8D,cAA9D,GAA+E,MAAMC,cAAcO,MAA7G,EACE;AACEK,YAAQ,KADV;AAEEC,aAAS,EAAE,iBAAiB,WAAWvB,MAAMwB,KAApC;AAFX,GADF,EAKEC,IALF,CAKO,UAACC,IAAD,EAAU;AACf,QAAIC,UAAUD,KAAKA,IAAL,CAAUE,MAAxB;AACA,QAAIA,SAAS,EAAb;AACA,qBAAEC,IAAF,CAAOF,OAAP,EAAgB,UAACG,MAAD,EAAY;AAC1B,UAAI,iBAAEV,GAAF,CAAMU,MAAN,EAAc,oBAAd,MAAwC,MAAxC,IAAkD,iBAAEV,GAAF,CAAMU,MAAN,EAAc,oBAAd,MAAwC,SAA9F,EAAyG;AACvGF,eAAOG,IAAP,CAAY;AACVC,mBAASF,OAAOG,GADN;AAEVC,qBAAW,iBAAEd,GAAF,CAAMU,MAAN,EAAc,uBAAd,CAFD;AAGVK,4BAAkB,iBAAEf,GAAF,CAAMU,MAAN,EAAc,gBAAd,CAHR;AAIVM,8BAAoB,iBAAEhB,GAAF,CAAMU,MAAN,EAAc,gBAAd,CAJV;AAKVO,6BAAmB,iBAAEjB,GAAF,CAAMU,MAAN,EAAc,gBAAd,CALT;AAMVQ,yBAAe,iBAAElB,GAAF,CAAMU,MAAN,EAAc,6BAAd,CANL;AAOVS,uBAAazC,UAAU,iBAAEsB,GAAF,CAAMU,MAAN,EAAc,oBAAd,CAAV,EAA8C9B,KAA9C;AAPH,SAAZ;AASD;AACF,KAZD,EAYGA,KAZH;AAaA2B,cAAU,iBAAEa,MAAF,CAASZ,MAAT,EAAiB,CAAC,aAAD,EAAgB,SAAhB,CAAjB,CAAV;AACAtB,QAAImC,IAAJ,CAAS,EAAE,UAAUd,OAAZ,EAAT;AACD,GAvBD,EAwBGe,KAxBH,CAwBS,UAAChB,IAAD,EAAU;AACfpB,QAAImC,IAAJ,CAAS,EAAE,SAAS,uBAAX,EAAT;AACD,GA1BH;AA2BD,CAvCD;;kBAyCe5C,M","file":"report.controller.js","sourcesContent":["import { Router } from 'express';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nconst router = Router();\nconst getStatus = (statusCode,query) => {\n  if (statusCode === query.inprogress) { return 'In Progress'; }\n  else if (statusCode === query.complete) { return 'Completed'; }\n  else if (statusCode === query.todo) { return 'To Do'; }\n  return statusCode;\n};\n\nrouter.post('/', (req, res, next) => {\n  let query = req.body;\n  let assigneeString = \"\";\n  let assigneeArray = query.assignee.split(',');\n  assigneeArray.forEach(function (a, i, array) {\n    if (i === array.length - 1) {\n      assigneeString += 'assignee=' + a;\n    } else {\n      assigneeString += 'assignee=' + a + '||';\n    }\n  }, assigneeString);\n  console.log(assigneeString);\n  axios.get(query.url + '/rest/api/latest/search?jql=' + assigneeString + '&maxResults=' + 100 * assigneeArray.length,\n    {\n      method: 'GET',\n      headers: { 'Authorization': 'Basic ' + query.token }\n    }\n  ).then((data) => {\n    let results = data.data.issues;\n    let issues = [];\n    _.each(results, (result) => {\n      if (_.get(result, 'fields.status.name') !== 'Done' && _.get(result, 'fields.status.name') !== 'Backlog') {\n        issues.push({\n          task_id: result.key,\n          task_type: _.get(result, 'fields.issuetype.name'),\n          task_description: _.get(result, 'fields.summary'),\n          task_creation_date: _.get(result, 'fields.created'),\n          task_updated_date: _.get(result, 'fields.updated'),\n          task_assignee: _.get(result, 'fields.assignee.displayName'),\n          task_status: getStatus(_.get(result, 'fields.status.name'),query)\n        });\n      }\n    }, query);\n    results = _.sortBy(issues, ['task_status', 'task_id']);\n    res.send({ 'result': results });\n  })\n    .catch((data) => {\n      res.send({ 'error': 'Unable to fetch data!' });\n    });\n});\n\nexport default router;"]}