{"version":3,"sources":["../../src/report/report.controller.js"],"names":["router","getStatus","statusCode","get","req","res","next","send","post","query","body","url","assignee","method","headers","token","then","data","results","issues","each","result","push","task_id","key","task_type","task_description","task_creation_date","task_updated_date","task_assignee","task_status","sortBy","catch"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,sBAAf;AACA,IAAMC,YAAY,SAAZA,SAAY,CAACC,UAAD,EAAgB;AAChC,MAAIA,eAAe,aAAnB,EAAkC;AAAE,WAAO,aAAP;AAAuB,GAA3D,MACK,IAAIA,eAAe,mBAAnB,EAAwC;AAAE,WAAO,WAAP;AAAqB,GAA/D,MACA,IAAIA,eAAe,0BAAnB,EAA+C;AAAE,WAAO,OAAP;AAAiB;;AAEvE,SAAOA,UAAP;AACD,CAND;AAOAF,OAAOG,GAAP,CAAW,MAAX,EAAmB,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAiB;AAClCD,MAAIE,IAAJ,CAAS,aAAT;AACD,CAFD;;AAIAP,OAAOQ,IAAP,CAAY,GAAZ,EAAiB,UAACJ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnC,MAAIG,QAAQL,IAAIM,IAAhB;AACA,kBAAMP,GAAN,CAAUM,MAAME,GAAN,GAAY,uCAAZ,GAAsDF,MAAMG,QAA5D,GAAuE,cAAvE,GAAwF,KAAlG,EACE;AACEC,YAAQ,KADV;AAEEC,aAAS,EAAE,iBAAiB,WAAWL,MAAMM,KAApC;AAFX,GADF,EAKEC,IALF,CAKO,UAACC,IAAD,EAAU;AACf,QAAIC,UAAUD,KAAKA,IAAL,CAAUE,MAAxB;AACA,QAAIA,SAAS,EAAb;AACA,qBAAEC,IAAF,CAAOF,OAAP,EAAgB,UAACG,MAAD,EAAY;AAC1B,UAAI,iBAAElB,GAAF,CAAMkB,MAAN,EAAc,oBAAd,MAAwC,MAA5C,EAAoD;AAClDF,eAAOG,IAAP,CAAY;AACVC,mBAASF,OAAOG,GADN;AAEVC,qBAAW,iBAAEtB,GAAF,CAAMkB,MAAN,EAAc,uBAAd,CAFD;AAGVK,4BAAkB,iBAAEvB,GAAF,CAAMkB,MAAN,EAAc,gBAAd,CAHR;AAIVM,8BAAoB,iBAAExB,GAAF,CAAMkB,MAAN,EAAc,gBAAd,CAJV;AAKVO,6BAAmB,iBAAEzB,GAAF,CAAMkB,MAAN,EAAc,gBAAd,CALT;AAMVQ,yBAAe,iBAAE1B,GAAF,CAAMkB,MAAN,EAAc,6BAAd,CANL;AAOVS,uBAAa7B,UAAU,iBAAEE,GAAF,CAAMkB,MAAN,EAAc,oBAAd,CAAV;AAPH,SAAZ;AASD;AACF,KAZD;AAaAH,cAAU,iBAAEa,MAAF,CAASZ,MAAT,EAAiB,CAAC,aAAD,EAAgB,SAAhB,CAAjB,CAAV;AACAd,QAAIE,IAAJ,CAAS,EAAE,UAAUW,OAAZ,EAAT;AACD,GAvBD,EAwBGc,KAxBH,CAwBS,UAACf,IAAD,EAAU;AACfZ,QAAIE,IAAJ,CAAS,EAAE,SAAS,uBAAX,EAAT;AACD,GA1BH;AA2BD,CA7BD;;kBA+BeP,M","file":"report.controller.js","sourcesContent":["import { Router } from 'express';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nconst router = Router();\nconst getStatus = (statusCode) => {\n  if (statusCode === 'In Progress') { return 'In Progress'; }\n  else if (statusCode === 'Ready For Testing') { return 'Completed'; }\n  else if (statusCode === 'Selected for Development') { return 'To Do'; }\n\n  return statusCode;\n};\nrouter.get('/abc', (req,res,next) =>{\n  res.send('asdfasdfsdf');\n});\n\nrouter.post('/', (req, res, next) => {\n  let query = req.body;\n  axios.get(query.url + '/rest/api/latest/search?jql=assignee=' + query.assignee + '&maxResults=' + '100',\n    {\n      method: 'GET',\n      headers: { 'Authorization': 'Basic ' + query.token }\n    }\n  ).then((data) => {\n    let results = data.data.issues;\n    let issues = [];\n    _.each(results, (result) => {\n      if (_.get(result, 'fields.status.name') !== 'Done') {\n        issues.push({\n          task_id: result.key,\n          task_type: _.get(result, 'fields.issuetype.name'),\n          task_description: _.get(result, 'fields.summary'),\n          task_creation_date: _.get(result, 'fields.created'),\n          task_updated_date: _.get(result, 'fields.updated'),\n          task_assignee: _.get(result, 'fields.assignee.displayName'),\n          task_status: getStatus(_.get(result, 'fields.status.name'))\n        });\n      }\n    }, this);\n    results = _.sortBy(issues, ['task_status', 'task_id']) ;\n    res.send({ 'result': results });\n  })\n    .catch((data) => {\n      res.send({ 'error': 'Unable to fetch data!' });\n    });\n});\n\nexport default router;"]}