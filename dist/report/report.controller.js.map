{"version":3,"sources":["../../src/report/report.controller.js"],"names":["reportController","post","req","res","query","body","assigneeString","getAssigneeString","assignee","assigneeArray","split","get","url","length","method","headers","token","then","data","results","composeTaskResult","send","catch","issues","each","result","push","task_id","key","task_type","task_description","task_creation_date","task_updated_date","task_assignee","task_project","task_status","getStatus","sortBy"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,mBAAmB,SAAnBA,gBAAmB,GAAM;AAC9B,KAAMC,OAAO,SAAPA,IAAO,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC1B,MAAIC,QAAQF,IAAIG,IAAhB;AACA,MAAIC,iBAAiB,iBAAcC,iBAAd,CAAgCH,MAAMI,QAAtC,CAArB;AACA,MAAIC,gBAAgBL,MAAMI,QAAN,CAAeE,KAAf,CAAqB,GAArB,CAApB;AACA,kBAAMC,GAAN,CAAUP,MAAMQ,GAAN,GAAY,8BAAZ,GAA6CN,cAA7C,GAA8D,cAA9D,GAA+E,MAAMG,cAAcI,MAA7G,EACC;AACCC,WAAQ,KADT;AAECC,YAAS,EAAE,iBAAiB,WAAWX,MAAMY,KAApC;AAFV,GADD,EAMEC,IANF,CAMO,UAACC,IAAD,EAAU;AACf,OAAIC,UAAUC,kBAAkB,iBAAET,GAAF,CAAMO,IAAN,EAAY,aAAZ,CAAlB,EAA8Cd,KAA9C,CAAd;AACAD,OAAIkB,IAAJ,CAAS,EAAE,UAAUF,OAAZ,EAAT;AACA,GATF,EAUEG,KAVF,CAUQ,UAACJ,IAAD,EAAU;AAChBf,OAAIkB,IAAJ,CAAS,EAAE,SAAS,0BAA0BH,IAArC,EAAT;AACA,GAZF;AAaA,EAjBD;AAkBA,KAAME,oBAAoB,SAApBA,iBAAoB,CAACD,OAAD,EAAUf,KAAV,EAAoB;AAC7C,MAAImB,SAAS,EAAb;AACA,mBAAEC,IAAF,CAAOL,OAAP,EAAgB,UAACM,MAAD,EAAY;AAC3B,OAAI,iBAAEd,GAAF,CAAMc,MAAN,EAAc,oBAAd,MAAwC,SAA5C,EAAuD;AACtDF,WAAOG,IAAP,CAAY;AACXC,cAASF,OAAOG,GADL;AAEXC,gBAAW,iBAAElB,GAAF,CAAMc,MAAN,EAAc,uBAAd,CAFA;AAGXK,uBAAkB,iBAAEnB,GAAF,CAAMc,MAAN,EAAc,gBAAd,CAHP;AAIXM,yBAAoB,iBAAEpB,GAAF,CAAMc,MAAN,EAAc,gBAAd,CAJT;AAKXO,wBAAmB,iBAAErB,GAAF,CAAMc,MAAN,EAAc,gBAAd,CALR;AAMXQ,oBAAe,iBAAEtB,GAAF,CAAMc,MAAN,EAAc,6BAAd,CANJ;AAOXS,mBAAc,iBAAEvB,GAAF,CAAMc,MAAN,EAAc,oBAAd,CAPH;AAQXU,kBAAa,iBAAcC,SAAd,CAAwB,iBAAEzB,GAAF,CAAMc,MAAN,EAAc,oBAAd,CAAxB,EAA6DrB,KAA7D;AARF,KAAZ;AAUA;AACD,GAbD,EAaGA,KAbH;AAcA,SAAO,iBAAEiC,MAAF,CAASd,MAAT,EAAiB,CAAC,aAAD,EAAgB,SAAhB,CAAjB,CAAP;AACA,EAjBD;AAkBA,QAAO;AACNtB,QAAMA;AADA,EAAP;AAGA,CAxCD;;kBA0CeD,gB","file":"report.controller.js","sourcesContent":["import axios from 'axios';\nimport _ from 'lodash';\nimport reportService from './report.service';\n\nconst reportController = () => {\n\tconst post = (req, res) => {\n\t\tlet query = req.body;\n\t\tlet assigneeString = reportService.getAssigneeString(query.assignee);\n\t\tlet assigneeArray = query.assignee.split(',');\n\t\taxios.get(query.url + '/rest/api/latest/search?jql=' + assigneeString + '&maxResults=' + 100 * assigneeArray.length,\n\t\t\t{\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: { 'Authorization': 'Basic ' + query.token }\n\t\t\t}\n\t\t)\n\t\t\t.then((data) => {\n\t\t\t\tlet results = composeTaskResult(_.get(data, 'data.issues'), query);\n\t\t\t\tres.send({ 'result': results });\n\t\t\t})\n\t\t\t.catch((data) => {\n\t\t\t\tres.send({ 'error': 'Unable to fetch data!' + data });\n\t\t\t});\n\t};\n\tconst composeTaskResult = (results, query) => {\n\t\tlet issues = [];\n\t\t_.each(results, (result) => {\n\t\t\tif (_.get(result, 'fields.status.name') !== 'Backlog') {\n\t\t\t\tissues.push({\n\t\t\t\t\ttask_id: result.key,\n\t\t\t\t\ttask_type: _.get(result, 'fields.issuetype.name'),\n\t\t\t\t\ttask_description: _.get(result, 'fields.summary'),\n\t\t\t\t\ttask_creation_date: _.get(result, 'fields.created'),\n\t\t\t\t\ttask_updated_date: _.get(result, 'fields.updated'),\n\t\t\t\t\ttask_assignee: _.get(result, 'fields.assignee.displayName'),\n\t\t\t\t\ttask_project: _.get(result, 'fields.project.key'),\n\t\t\t\t\ttask_status: reportService.getStatus(_.get(result, 'fields.status.name'), query)\n\t\t\t\t});\n\t\t\t}\n\t\t}, query);\n\t\treturn _.sortBy(issues, ['task_status', 'task_id']);\n\t};\n\treturn {\n\t\tpost: post\n\t};\n};\n\nexport default reportController;"]}